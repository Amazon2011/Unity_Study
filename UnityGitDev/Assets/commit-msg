#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

#test "" = "$(grep '^Signed-off-by: ' "$1" |
#	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
#	echo >&2 Duplicate Signed-off-by lines.
#	exit 1
#}

#list_files='git diff-tree --no-commit-id --name-only -r $commit'

#for full_file in $list_files
#do
#	echo "第一个参数为："$full_file""
#	exit 1
#done

withMetaFileNameList=()
fileNameList=()

for file in `git diff --cached --diff-filter=A --name-only` ; do
	if [[ "${file}" =~ "/Assets/" ]]
	then
		if [[ "${file}" == *.meta ]]
		then
			withMetaFileNameList+=(${file%*.meta})
		else
			fileNameList+=("${file}")
		fi
	fi
done

withMetaFileName=" ${withMetaFileNameList[*]} "
noMetaFileNames=()

for fileName in ${fileNameList[@]}
do  
{
    if [[ !("${withMetaFileName}" =~ " $fileName ") ]]
	then
		noMetaFileNames+=("${fileName}")
	fi
}
done

if [ ${#noMetaFileNames[@]} -ne 0 ]
then
	echo "The following files have no meta files"
	for noMetaFileName in ${noMetaFileNames[@]}
	do  
	{
		echo "${noMetaFileName}"
	}
	done
	echo $'\n'
	exit 1
fi

exit 0